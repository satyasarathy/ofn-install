---

- name: Add database user
  become: yes
  become_user: postgres
  postgresql_user:
    name: "{{ db_integration.user }}"
    password: "{{ db_integration.password }}"
    encrypted: yes
    expires: infinity
    db: "{{ db }}"
    role_attr_flags: LOGIN,INHERIT,NOSUPERUSER,NOCREATEDB,NOCREATEROLE,NOREPLICATION
    state: present
  notify: restart postgresql
  when: db_integration.state == 'present'
  register: integration_config

- name: Grant permissions # noqa 503
  become: yes
  become_user: postgres
  command: "psql {{ db }} -c '{{ permission_query }}'"
  loop:
    - "GRANT USAGE ON SCHEMA public TO {{ db_integration.user }};"
    - "GRANT CONNECT ON DATABASE {{ db }} TO {{ db_integration.user }};"
    - "GRANT SELECT ON ALL TABLES IN SCHEMA public TO {{ db_integration.user }};"
    - "GRANT SELECT ON ALL SEQUENCES IN SCHEMA public TO {{ db_integration.user }};"
    - "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO {{ db_integration.user }};"
    - "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON SEQUENCES TO {{ db_integration.user }};"
  loop_control:
    loop_var: permission_query
  when: db_integration.state == 'present' and integration_config.changed

- name: Check user presence
  become: yes
  become_user: postgres
  command: psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='{{ db_integration.user }}'"
  changed_when: False
  register: db_user_exists
  when: db_integration.state == 'absent'

- name: Revoke permissions
  become: yes
  become_user: postgres
  command: "psql {{ db }} -c '{{ permission_query }}'"
  loop:
    - "REVOKE USAGE ON SCHEMA public FROM {{ db_integration.user }};"
    - "REVOKE CONNECT ON DATABASE {{ db }} FROM {{ db_integration.user }};"
    - "REVOKE SELECT ON ALL TABLES IN SCHEMA public FROM {{ db_integration.user }};"
    - "REVOKE SELECT ON ALL SEQUENCES IN SCHEMA public FROM {{ db_integration.user }};"
    - "ALTER DEFAULT PRIVILEGES IN SCHEMA public REVOKE SELECT ON TABLES FROM {{ db_integration.user }};"
    - "ALTER DEFAULT PRIVILEGES IN SCHEMA public REVOKE SELECT ON SEQUENCES FROM {{ db_integration.user }};"
  loop_control:
    loop_var: permission_query
  when: db_integration.state == 'absent' and db_user_exists.stdout == '1'
  register: integration_config

- name: Remove database user
  become: yes
  become_user: postgres
  postgresql_user:
    name: "{{ db_integration.user }}"
    state: absent
  when: db_integration.state == 'absent' and db_user_exists.stdout == '1'
  register: integration_config
