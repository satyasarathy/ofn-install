working_directory "{{ current_path }}"
pid "{{ unicorn_pid }}"
stderr_path "{{ unicorn_log }}"
stdout_path "{{ unicorn_log }}"

listen "{{ unicorn_sock }}"
worker_processes {{ unicorn_workers }}
timeout {{ unicorn_timeout }}

# Enable this flag to have unicorn test client connections by writing the
# beginning of the HTTP headers before calling the application. This
# prevents calling the application for connections that have disconnected
# while queued.
check_client_connection true

# The following enables use of the Ruby 2.0+ Copy-On-Write feature
# for more efficient memory usage in Unicorn workers.

if ['production', 'staging'].include? ENV["RAILS_ENV"]
  # Enable Copy-On-Write
  preload_app true

  GC.respond_to?(:copy_on_write_friendly=) and
    GC.copy_on_write_friendly = true

  before_exec do |server|
    # Ensure new Unicorn master process fetches the new Gemfile
    # when switching between builds during deployment.
    ENV["BUNDLE_GEMFILE"] = "{{ current_path }}/Gemfile"
  end

  before_fork do |server, worker|
    defined?(ActiveRecord::Base) and
      ActiveRecord::Base.connection.disconnect!

    # Before forking, kill the master process that belongs to the .oldbin PID
    # Note: this is taken from Capistrano's zero-downtime deployment strategy
    old_pid = "#{server.config[:pid]}.oldbin"
    if File.exists?(old_pid) && server.pid != old_pid
      begin
        Process.kill("QUIT", File.read(old_pid).to_i)
      rescue Errno::ENOENT, Errno::ESRCH
      end
    end
  end

  after_fork do |server, worker|
    defined?(ActiveRecord::Base) and
        ActiveRecord::Base.establish_connection
  end
end
